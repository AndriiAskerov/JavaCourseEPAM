Data: class CITY
Read data from XML
Write result to JSON

Task 2.1
——————————————————————————————
Package name: ua.advanced.practice2
Type names: List, ListImpl
——————————————————————————————

2.1.1 Create a List interface containing the following: 

—————————————————-
package ua.advanced.practice2

public interface List extends Container { 

 // Inserts the specified element at the beginning.
  void addFirst(Object element); 

  // Appends the specified element to the end.
  void addLast(Object element);  

 // Removes the first element.  
void removeFirst();  

 // Removes the last element. 
 void removeLast();  

 // Returns the first element.
  Object getFirst();   

// Returns the last element.  
Object getLast();  

 // Returns the first occurrence of the specified element.
  // Returns null if no such element. 
 // (use 'equals' method to check an occurrence)  
Object search(Object element);  
 
// Removes the first occurrence of the specified element. 
 // Returns true if this list contained the specified element.
   // (use 'equals' method to check an occurrence)  
boolean remove(Object element); 

 }

—————————————————-

Storage of the objects inside the container should be implemented by using set of nodes - instances of the Node class.
Each node stores an object and a reference to the next node.
Node class should be defined inside the ListImpl class (it should be a static nested class).

The ‘iterator’ method should return an instance of the IteratorImpl class that implements java.util.Iterator<Object> interface.
The IteratorImpl class should be defined inside the ListImpl class (it should be an inner class).

In case the three elements A, B, C were added to the container using the ‘addLast’ method, then:
1)	toString method should return the following string "[A, B, C]”
2)	the elements iteration order should be: A B C

2.1.2 In the ListImpl class, create ‘main’ method where you should demonstrate the functionality of:
1)	all the methods from the List interface (including those inherited from Container and Iterable);
2)	all the methods of the Iterator interface (hasNext/next/remove).

_______________________

Task 2.2
——————————————————————————————
Type names: Queue, QueueImpl
——————————————————————————————

2.2.1  Create Queue interface containing the following:

—————————————————-
public interface Queue extends Container {  

 // Appends the specified element to the end.  
void enqueue(Object element);  

 // Removes the head.  
Object dequeue();   

// Returns the head. 
 Object top();  

}
—————————————————-

2.2.2 Create QueueImpl class that implements the Queue interface.

In case the three elements A, B, C were added to the container using the ‘enqueue’ method, then:

1)	toString method should return the following string "[A, B, C]”
2)	the elements iteration order should be: A B C

2.2.3 In the QueueImpl class, create ‘main’ method where you should demonstrate the functionality of:
1)	all the methods from the Queue interface (including those inherited from Container and Interable);
2)	all the methods of the Iterator interface (hasNext/next/remove).

_______________________

Task 2.3
——————————————————————————————
Type names: Stack, StackImpl
——————————————————————————————

2.3.1.  Create Stack interface containing the following:

—————————————————-
package ua.advanced.practice2; 

 public interface Stack extends Container {   

 // Pushes the specified element onto the top.  
void push(Object element);    

// Removes and returns the top element. 
 Object pop();   

// Returns the top element. 
 Object top();  

 }
—————————————————-

2.3.2 Create StackImpl class that implements the Stack interface.

In case the three elements  A, B, C were added to the container using ‘push’ method , then:
1)   toString method should return the following string "[A, B, C]”
3)	the elements iteration order should be: C B A

2.3.3 In the StackImpl class, create ‘main’ method where you should demonstrate the functionality of:
1)	all the methods from the Stack interface (including those inherited from Container and Interable);
2)	all the methods of the Iterator interface (hasNext/next/remove).


_______________________

Notes.
1.	The result should be presented as a project named Practice2.
2.	The root package for all the classes: com.epam.rd.java.basic.practice2
3.  Additionally, add Demo class to your root package that demonstrates the actions of all the subtasks.
4.  Upload the project to the repository, run the build successfully in Jenkins, optimize the metrics in Sonar.

_______________________